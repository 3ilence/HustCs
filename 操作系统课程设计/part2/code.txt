 //系统调用头文件
asmlinkage int sys_mcf(const char __user* source,const char __user* target);

//增加系统调用号
336	64	mcf		sys_mcf


//增加系统调用函数体
SYSCALL_DEFINE2(mcf,const char __user*,source,const char __user*,target){
	long ret = 0;
	char buffer[1000];
	// 转化为内核存储空间
	char * source_kd = strndup_user(source, PAGE_SIZE);
	char * target_kd = strndup_user(target, PAGE_SIZE);
	// 异常处理
	//判断返回指针是否错误
	if (IS_ERR(source_kd)) {
		printk("source path error1");
		ret = PTR_ERR(source);//如果出错了，返回指针里保存的错误代码
		goto error;
	}
	if (IS_ERR(target_kd)) {
		printk("target path error1");
		ret = PTR_ERR(target);
		goto error;
	}
	printk("source path : %s, taget path : %s", source_kd, target_kd);

	//防止使用的缓冲区超过了用户空间的地址范围
	mm_segment_t old_fs = get_fs();
	set_fs(KERNEL_DS);
	//文件打开
	struct file* source_fd = filp_open(source_kd, O_RDONLY, S_IRUSR);
	struct file* target_fd = filp_open(target_kd, O_WRONLY | O_CREAT, S_IRUSR|S_IWUSR);
	// 异常处理
	if (IS_ERR(source_fd)) {
       		 ret = PTR_ERR(source);
        		printk("source file path error2\n");
        		goto error;
    	}
    	if (IS_ERR(target_fd)) {
        		ret = PTR_ERR(target);
        		printk("target file path error2\n");
        		goto error;
    	}
	// 读取文件
	int read_num = 0;
	// vfs_read(source_fd, buffer, sizeof(buffer), &(source_fd->f_pos));
    	// vfs_write(target_fd, buffer, sizeof(buffer), &(target_fd->f_pos));
	int count = 0;
	while ((read_num = vfs_read(source_fd,buffer, sizeof(buffer), &source_fd->f_pos)) > 0) {
       		 vfs_write(target_fd, buffer, read_num, &target_fd->f_pos);
		count += 1;
	}
	//读写完成后再恢复原先fs
	set_fs(old_fs);

error:
	return ret;
}